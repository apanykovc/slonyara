"""Handlers for user facing bot commands."""
from __future__ import annotations

from datetime import datetime, timedelta

from aiogram import Dispatcher, Router, types
from aiogram.filters import Command, CommandStart

from bot.models.storage import MeetingStorage
from bot.services.reminder import ReminderService
from bot.utils.meeting_parser import parse_meeting_command


def create_router(storage: MeetingStorage, reminder: ReminderService) -> Router:
    router = Router(name="user-handlers")

    @router.message(CommandStart())
    async def handle_start(message: types.Message) -> None:
        user_full_name = message.from_user.full_name if message.from_user else "–¥—Ä—É–≥"
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.".format(name=user_full_name)
        )

    @router.message(Command("help"))
    async def handle_help(message: types.Message) -> None:
        await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/meetings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏\n"
            "/schedule ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )

    @router.message(Command("meetings"))
    async def handle_meetings(message: types.Message) -> None:
        if not message.from_user:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        chat_id = message.chat.id if message.chat else None
        if chat_id and not storage.has_chat_role(chat_id, message.from_user.id, ("admin", "user")):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Å—Ç—Ä–µ—á–∞–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return
        meetings = storage.list_meetings_for_user(message.from_user.id, chat_id=chat_id)
        if not meetings:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
            return

        lines = ["–í–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏:"]
        for meeting in meetings:
            when = meeting.scheduled_at.strftime("%d.%m.%Y %H:%M")
            parts: list[str] = []
            if meeting.meeting_type:
                parts.append(meeting.meeting_type)
            elif meeting.title:
                parts.append(meeting.title)
            if meeting.room:
                parts.append(f"–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è {meeting.room}")
            if meeting.request_number:
                parts.append(f"–ó–∞—è–≤–∫–∞ {meeting.request_number}")
            title = " ‚Äî ".join(parts) if parts else meeting.title or "–í—Å—Ç—Ä–µ—á–∞"
            lines.append(f"‚Ä¢ {title} ({when})")
        await message.answer("\n".join(lines))

    @router.message(Command("schedule"))
    async def handle_schedule(message: types.Message) -> None:
        if not message.chat:
            await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
            return
        if not storage.has_chat_role(message.chat.id, message.from_user.id if message.from_user else 0, ("admin", "user")):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return
        meetings = storage.list_meetings_for_chat(message.chat.id)
        if not meetings:
            await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.")
            return
        lines = ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á —á–∞—Ç–∞:"]
        for meeting in meetings:
            when = meeting.scheduled_at.strftime("%d.%m.%Y %H:%M")
            parts: list[str] = []
            if meeting.meeting_type:
                parts.append(meeting.meeting_type)
            elif meeting.title:
                parts.append(meeting.title)
            if meeting.room:
                parts.append(f"–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è {meeting.room}")
            if meeting.request_number:
                parts.append(f"–ó–∞—è–≤–∫–∞ {meeting.request_number}")
            title = " ‚Äî ".join(parts) if parts else meeting.title or "–í—Å—Ç—Ä–µ—á–∞"
            lines.append(f"‚Ä¢ {when} ‚Äî {title}")
        await message.answer("\n".join(lines))

    def _resolve_target_chat(
        message: types.Message, command_chat_id: int | None
    ) -> tuple[int | None, str | None]:
        if message.chat and message.chat.type != "private":
            chat_id = message.chat.id
            if command_chat_id and command_chat_id != chat_id:
                return None, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å #<id>."
            if not storage.is_chat_registered(chat_id):
                return None, "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            return chat_id, None

        chat_id = command_chat_id
        if chat_id is not None:
            if not storage.is_chat_registered(chat_id):
                return None, "–£–∫–∞–∂–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏."
            return chat_id, None

        if not message.from_user:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

        available = storage.list_user_chats(message.from_user.id, roles=("admin", "user"))
        if not available:
            return None, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤. –£–∫–∞–∂–∏—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å #<id>."
        if len(available) == 1:
            return available[0].id, None
        options = ", ".join(
            f"#{chat.id} ‚Äî {chat.title or chat.id}" for chat in available
        )
        return None, "–£–∫–∞–∂–∏—Ç–µ —á–∞—Ç —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å #<id>. –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã: {options}"

    @router.message()
    async def handle_shortcut_creation(message: types.Message) -> None:
        if not message.text or message.text.startswith("/"):
            return
        if not message.from_user or not message.chat:
            return
        now = datetime.now(tz=storage.timezone)
        command = parse_meeting_command(message.text, now)
        if not command:
            return

        chat_id, error = _resolve_target_chat(message, command.chat_id)
        if error:
            await message.answer(error)
            return
        if chat_id is None:
            return

        user_id = message.from_user.id
        if not storage.has_chat_role(chat_id, user_id, ("admin", "user")):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
            return

        if command.action == "create":
            if not command.scheduled_at:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏.")
                return
            if command.request_number:
                existing = storage.find_meeting_by_request_number(command.request_number)
                if existing:
                    await message.answer("–í—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                    return
            meeting_type = command.meeting_type or "–í—Å—Ç—Ä–µ—á–∞"
            title = meeting_type
            if command.room:
                title = f"{meeting_type} ({command.room})"
            meeting = storage.create_meeting(
                title=title,
                scheduled_at=command.scheduled_at,
                organizer_id=user_id,
                meeting_type=command.meeting_type,
                room=command.room,
                request_number=command.request_number,
                participants=[user_id],
                chat_id=chat_id,
            )
            await message.answer(
                "–í—Å—Ç—Ä–µ—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
                f"–ö–æ–≥–¥–∞: {meeting.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {meeting.request_number or '‚Äî'}"
            )
            return

        if command.action == "snooze":
            minutes = command.minutes_delta or 0
            if minutes not in (5, 10, 15):
                await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å–Ω–æ—É–∑—ã –Ω–∞ 5, 10 –∏–ª–∏ 15 –º–∏–Ω—É—Ç.")
                return
            if command.request_number:
                meeting = storage.find_meeting_by_request_number(command.request_number)
                if not meeting or (meeting.chat_id and meeting.chat_id != chat_id):
                    await message.answer("–í—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")
                    return
            else:
                meetings = storage.list_meetings_for_user(user_id, chat_id=chat_id)
                meeting = meetings[0] if meetings else None
            if not meeting:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.")
                return
            if meeting.chat_id and meeting.chat_id != chat_id:
                await message.answer("–≠—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —á–∞—Ç—É.")
                return
            if user_id not in meeting.participants and meeting.organizer_id != user_id:
                await message.answer("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏.")
                return
            new_time = meeting.scheduled_at + timedelta(minutes=minutes)
            updated = storage.update_meeting(meeting.id, scheduled_at=new_time)
            if not updated:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É.")
                return
            await reminder.send_due_reminders()
            await message.answer(
                "–í—Å—Ç—Ä–µ—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞.\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç: {updated.scheduled_at.strftime('%d.%m.%Y %H:%M')}"
            )
            return

        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    return router


def register(dispatcher: Dispatcher, storage: MeetingStorage, reminder: ReminderService) -> None:
    """Register router within provided dispatcher."""

    dispatcher.include_router(create_router(storage, reminder))
